---
description: 
globs: 
alwaysApply: true
---
# Reglas de Uso de Memoria de Contexto

## Objetivo
Optimizar el consumo de tokens proporcionando a la IA el contexto m√≠nimo necesario seg√∫n el tipo de consulta o tarea.

# Reglas de Uso de Memoria de Contexto

## Objetivo
Optimizar el uso de tokens y mantener el contexto m√≠nimo necesario para desarrollo eficiente de TaskManager Pro, un sistema de gesti√≥n de tareas con React + FastAPI + MariaDB.

## Archivos de Memoria Disponibles

### üìã `.cursor/memory/long_memory/project_brief.md`
**Contenido:** Resumen ejecutivo completo del proyecto TaskManager Pro, objetivos, stakeholders, timeline y criterios de √©xito
**Usar cuando:**
- Se necesite contexto general del proyecto y sus objetivos de negocio
- Se requiera informaci√≥n sobre stakeholders y requisitos funcionales
- Se busque entender el prop√≥sito educativo del proyecto
- Se necesiten criterios de validaci√≥n y success metrics
**NO usar para:** Detalles t√©cnicos de implementaci√≥n, patrones de c√≥digo espec√≠ficos, o decisiones arquitect√≥nicas detalladas

### üèóÔ∏è `.cursor/memory/long_memory/architecture.md`
**Contenido:** Arquitectura completa del sistema: componentes, flujos de datos, stack tecnol√≥gico (React/FastAPI/MariaDB), deployment y escalabilidad
**Usar cuando:**
- Se implemente funcionalidad que requiera entender la arquitectura de 3 capas
- Se necesite informaci√≥n sobre tecnolog√≠as espec√≠ficas (React 18+, FastAPI 0.100+, MariaDB 10.11+)
- Se trabaje con integraciones entre frontend y backend REST API
- Se configure Docker, contenedores o despliegue del sistema
**NO usar para:** Patrones de c√≥digo espec√≠ficos, decisiones de negocio, o tareas de usuario final

### üîß `.cursor/memory/long_memory/decisions.md`
**Contenido:** Registro de decisiones arquitect√≥nicas (ADRs) incluyendo elecci√≥n de React vs Vue, FastAPI vs Django, MariaDB vs PostgreSQL, y patrones de desarrollo
**Usar cuando:**
- Se eval√∫en alternativas tecnol√≥gicas o se justifiquen decisiones t√©cnicas
- Se necesite contexto sobre por qu√© se eligieron tecnolog√≠as espec√≠ficas
- Se implementen cambios que afecten decisiones arquitect√≥nicas previas
- Se requiera historial de trade-offs y consecuencias de decisiones t√©cnicas
**NO usar para:** Implementaci√≥n de c√≥digo espec√≠fico, tareas de usuario, o informaci√≥n general del proyecto

### üë®‚Äçüíª `.cursor/memory/long_memory/patterns.md`
**Contenido:** Patrones de c√≥digo, convenciones de desarrollo, AI-Hints obligatorios, naming conventions y ejemplos espec√≠ficos para React/FastAPI/Python/TypeScript
**Usar cuando:**
- Se escriba c√≥digo nuevo que requiera seguir patrones establecidos
- Se necesiten ejemplos de AI-Hints espec√≠ficos para el stack tecnol√≥gico
- Se implementen componentes React, endpoints FastAPI, o modelos SQLAlchemy
- Se requieran convenciones de naming, estructura de archivos, o testing patterns
**NO usar para:** Decisiones de arquitectura, informaci√≥n de negocio, o configuraci√≥n de infraestructura

## Reglas de Optimizaci√≥n

### ‚úÖ Cargar M√∫ltiples Archivos Cuando:
- **Implementaci√≥n de funcionalidad completa**: architecture.md + patterns.md + decisions.md (para entender arquitectura, patrones y justificaciones)
- **Dise√±o de nuevos m√≥dulos**: project_brief.md + architecture.md (para alinear objetivos de negocio con arquitectura t√©cnica)
- **Refactoring arquitect√≥nico**: architecture.md + decisions.md + patterns.md (para mantener consistencia con decisiones previas)

### ‚ö° Cargar Solo Un Archivo Cuando:
- **Implementaci√≥n de c√≥digo simple**: Solo patterns.md para seguir convenciones establecidas
- **Consultas de negocio**: Solo project_brief.md para objetivos y stakeholders
- **Debugging de arquitectura**: Solo architecture.md para flujos de datos y componentes
- **Consulta hist√≥rica**: Solo decisions.md para entender decisiones pasadas

### ‚ùå NO Cargar Archivos Cuando:
- Se trabaje con tareas simples de configuraci√≥n que no requieren contexto del proyecto
- Se manejen dependencias b√°sicas (package.json, requirements.txt) sin l√≥gica compleja
- Se actualice documentaci√≥n que no afecte c√≥digo o arquitectura

## Priorizaci√≥n por Tipo de Consulta

1. **Implementaci√≥n de componentes React**: patterns.md ‚Üí architecture.md
2. **Desarrollo de endpoints FastAPI**: patterns.md ‚Üí architecture.md ‚Üí decisions.md
3. **Configuraci√≥n de base de datos**: architecture.md ‚Üí patterns.md
4. **Planificaci√≥n de funcionalidades**: project_brief.md ‚Üí architecture.md
5. **Debugging de integraci√≥n**: architecture.md ‚Üí patterns.md
6. **Evaluaci√≥n tecnol√≥gica**: decisions.md ‚Üí architecture.md

## Se√±ales de Uso Eficiente

### ‚úÖ Buenas pr√°cticas:
- Consultar patterns.md antes de escribir cualquier c√≥digo para mantener consistencia
- Usar architecture.md para entender flujos de datos antes de implementar integraciones
- Revisar decisions.md cuando se consideren cambios arquitect√≥nicos importantes

### ‚ùå Evitar:
- Cargar todos los archivos para consultas simples de sintaxis o configuraci√≥n b√°sica
- Usar project_brief.md para detalles t√©cnicos espec√≠ficos de implementaci√≥n
- Consultar decisions.md para patrones de c√≥digo rutinarios

## Acceso a Documentaci√≥n T√©cnica

### üìë Archivo √çndice Principal: `docs/info/index.md`
**Usar cuando:**
- Se necesite localizar documentaci√≥n espec√≠fica generada durante el desarrollo
- Se busque informaci√≥n sobre componentes implementados y su estado
- Se requiera navegaci√≥n por categor√≠as de documentaci√≥n t√©cnica

### üìä Estrategia de Consulta de Documentaci√≥n:
1. **Consultar `docs/info/index.md`** para localizar documentaci√≥n espec√≠fica
2. **Acceder a documentos categorizados** en `docs/info/[categor√≠a]/`
3. **Validar estado de completitud** seg√∫n √≠ndices de documentaci√≥n

## Ejecuci√≥n de Tareas TODO

### üìã Sistema de Tareas: `docs/TODO.md`
**Usar cuando:**
- Se requiera ejecutar tareas espec√≠ficas del proyecto de forma estructurada
- Se necesite seguir la metodolog√≠a de desarrollo paso a paso
- Se implemente funcionalidad siguiendo la progresi√≥n planificada

### üîÑ Flujo de Ejecuci√≥n de Tareas:
1. **Consultar TODO.md** para identificar tarea espec√≠fica
2. **Cargar contexto apropiado** seg√∫n tipo de tarea (usar reglas de priorizaci√≥n)
3. **Ejecutar metodolog√≠a estructurada** definida en task_execution.mdc
4. **Documentar resultados** actualizando `docs/info/index.md`

## AI-Hints Obligatorios

### üìù Formato AI-Hint para TaskManager Pro:
```python
# AI-Hint: [Prop√≥sito espec√≠fico] | [Relaciones con UserService/TaskService/etc] | [Restricciones de FastAPI/SQLAlchemy] | [TODOs espec√≠ficos]
```

```typescript
// AI-Hint: [Prop√≥sito espec√≠fico] | [Integraciones con API/Redux/etc] | [Restricciones de React/TypeScript] | [TODOs espec√≠ficos]
```

### üéØ Usar AI-Hints obligatoriamente en:
- Servicios FastAPI y modelos SQLAlchemy
- Componentes React complejos y custom hooks
- Integraciones entre frontend y backend
- Configuraciones de Docker y base de datos

---
*√öltima actualizaci√≥n: 2024-12-19*
*Total archivos de memoria: 4*
