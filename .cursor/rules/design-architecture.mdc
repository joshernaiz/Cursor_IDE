---
description: 
globs: 
alwaysApply: false
---
# Plan de Diseño y Arquitectura - Reglas de Desarrollo

## Arquitectura General
- **Patrón**: Clean Architecture con separación clara de capas
- **Frontend**: React SPA con Redux Toolkit y RTK Query  
- **Backend**: Express API con MongoDB y Mongoose
- **Comunicación**: REST API con autenticación JWT
- **Diagramas**: Usar Mermaid para arquitectura, flujos y modelos

## Diseño Frontend
### Principios UI/UX
- **Consistencia**: Elementos visuales y patrones uniformes
- **Feedback inmediato**: Respuesta visual para cada acción  
- **Eficiencia**: Minimizar pasos para tareas frecuentes
- **Accesibilidad**: Cumplimiento WCAG 2.1 AA

### Estructura y Componentes
- **Navegación**: Mapa claro con flujos principales
- **Estados UI**: Loading, error, vacío siempre cubiertos
- **Componentes**: Reutilizables con props tipadas
- **Gestión Estado**: Redux Toolkit para estado global
- **Validaciones**: Formik/React Hook Form con esquemas

## Diseño Backend
### Arquitectura del Servidor
- **Patrón MVC**: Controladores, servicios, modelos separados
- **Capas**: Presentación → Lógica → Persistencia
- **Modularización**: Por dominio funcional
- **Dependencias**: Inyección de dependencias clara

### API y Datos
- **REST**: Endpoints semánticamente claros
- **Autenticación**: JWT con refresh tokens
- **Validaciones**: Esquemas Zod para entrada/salida
- **Errores**: Códigos HTTP estándar + mensajes consistentes
- **Documentación**: Swagger/OpenAPI automática

## Flujos Críticos
- **Autenticación**: Login → Validación → Token → Dashboard
- **CRUD Principal**: Formulario → Validación → Persistencia → Feedback
- **Búsqueda/Filtros**: Input → Debounce → API → Actualización UI

## AI-Hints Obligatorios
```
// AI-Hint Component: [Nombre] [Propósito] [Responsabilidades]
// AI-Hint Flow: [Proceso] [Pasos] [Consideraciones]  
// AI-Hint Data: [Modelo] [Estructura] [Validaciones]
// AI-Hint Security: [Aspecto] [Protecciones] [Consideraciones]
```

## Consideraciones Transversales
- **Seguridad**: OWASP, sanitización, encriptación
- **Performance**: Lazy loading, paginación, caché
- **Testing**: Jest + React Testing Library + Supertest
- **Monitoreo**: Logs estructurados con niveles
