---
description: 
globs: 
alwaysApply: true
---
# Reglas para Ejecuci√≥n Estructurada de Tareas TODO

## Objetivo
Proporcionar una metodolog√≠a clara para que la IA pueda ejecutar tareas espec√≠ficas de los archivos TODO del proyecto de manera estructurada, documentada y trazable.

# Reglas para Ejecuci√≥n Estructurada de Tareas TODO

## Objetivo
Definir metodolog√≠a clara y estructurada para ejecutar tareas espec√≠ficas del desarrollo de TaskManager Pro, garantizando progresi√≥n sistem√°tica y documentaci√≥n consistente.

## Formato de Invocaci√≥n

### Sintaxis de Comando
```
Ejecutar tarea: {{TASK}} del archivo {{FILEMD}}
```

**Ejemplos:**
- `Ejecutar tarea: 1.1.1 del archivo docs/TODO.md`
- `Ejecutar tarea: 2.3.2 del archivo docs/TODO.md`
- `Ejecutar tarea: 4.1.1 del archivo docs/TODO.md`

### Variables de Contexto
- **{{TASK}}**: Identificador espec√≠fico de la tarea (ej: 1.1.1, 2.3.2) que corresponde exactamente al n√∫mero en el archivo TODO
- **{{FILEMD}}**: Ruta del archivo de tareas, siempre `docs/TODO.md` para TaskManager Pro

## Metodolog√≠a de Ejecuci√≥n

### Fase 1: An√°lisis Inicial
**Pasos obligatorios:**
1. **Leer archivo TODO**: Acceder a `docs/TODO.md` y localizar la tarea espec√≠fica por su identificador
2. **Identificar tarea**: Extraer descripci√≥n completa, prerequisitos y criterios de √©xito definidos
3. **Consultar documentaci√≥n**: Revisar `docs/info/index.md` para documentaci√≥n relacionada existente
4. **Analizar dependencias**: Verificar que tareas prerequisito est√©n marcadas como completadas (‚úÖ)

### Fase 2: Planificaci√≥n Estructurada
**Pasos obligatorios:**
1. **Dividir en subtareas**: Usar numeraci√≥n jer√°rquica (ej: 1.1.1.a, 1.1.1.b, 1.1.1.c)
2. **Identificar recursos**: Determinar archivos a crear/modificar, comandos necesarios, dependencias a instalar
3. **Estimar complejidad**: Clasificar como Simple (< 1h), Moderada (1-2h), Compleja (2-4h)
4. **Definir criterios**: Establecer m√©tricas de validaci√≥n t√©cnica y funcional espec√≠ficas

### Fase 3: Ejecuci√≥n Paso a Paso
**Para cada subtarea:**

#### A. Preparaci√≥n
- Verificar estructura de directorios necesaria para TaskManager Pro
- Confirmar versiones de dependencias (React 18+, FastAPI 0.100+, MariaDB 10.11+)
- Preparar entorno de desarrollo (Docker, venv, node_modules)

#### B. Implementaci√≥n
- **Generar/Modificar c√≥digo**: Seguir patrones de TaskManager Pro seg√∫n `patterns.md`
- **A√±adir AI-Hints**: Comentarios especiales para contexto futuro (OBLIGATORIO)
  ```python
  # AI-Hint: [Prop√≥sito] | [Relaciones con TaskService/UserService/AuthService] | [Restricciones FastAPI/SQLAlchemy] | [TODOs espec√≠ficos]
  ```
  ```typescript
  // AI-Hint: [Prop√≥sito] | [Integraciones con API REST/Redux/React Query] | [Restricciones React/TypeScript] | [TODOs espec√≠ficos]
  ```
- **Mantener consistencia**: Usar convenciones de nombres, estructura de archivos y patrones arquitect√≥nicos establecidos

#### C. Validaci√≥n
- Ejecutar tests unitarios con `pytest` (backend) y `vitest` (frontend)
- Probar endpoints con herramientas como `curl`, Postman o FastAPI docs
- Validar integraci√≥n frontend-backend y flujos de datos
- Verificar funcionamiento con Docker Compose

### Fase 4: Documentaci√≥n y Actualizaci√≥n
**Pasos obligatorios:**
1. **Crear/Actualizar documentaci√≥n**: Generar archivo `.md` en `docs/info/` con nombre descriptivo basado en funcionalidad implementada
2. **Actualizar √≠ndice maestro**: OBLIGATORIO actualizar `docs/info/index.md` agregando nueva entrada con descripci√≥n espec√≠fica y categor√≠a apropiada
3. **Actualizar TODO**: Marcar subtareas como completadas (‚úÖ) en `docs/TODO.md` y a√±adir detalles de implementaci√≥n
4. **Registrar cambios**: Documentar archivos modificados, comandos de prueba, y referencias cruzadas

## Estructura de Documentaci√≥n del Proyecto

### Directorio Base: `docs/`
```
docs/
‚îú‚îÄ‚îÄ TODO.md                        # Archivo principal de tareas del proyecto
‚îú‚îÄ‚îÄ info/                          # Documentaci√≥n t√©cnica generada
‚îÇ   ‚îú‚îÄ‚îÄ index.md                   # √çNDICE MAESTRO (CR√çTICO)
‚îÇ   ‚îú‚îÄ‚îÄ arquitectura/              # Documentaci√≥n de arquitectura y dise√±o
‚îÇ   ‚îú‚îÄ‚îÄ backend/                   # Documentaci√≥n espec√≠fica de FastAPI/Python
‚îÇ   ‚îú‚îÄ‚îÄ frontend/                  # Documentaci√≥n espec√≠fica de React/TypeScript
‚îÇ   ‚îú‚îÄ‚îÄ database/                  # Documentaci√≥n de MariaDB y modelos
‚îÇ   ‚îú‚îÄ‚îÄ api/                       # Documentaci√≥n de endpoints y contratos
‚îÇ   ‚îú‚îÄ‚îÄ testing/                   # Documentaci√≥n de pruebas y validaci√≥n
‚îÇ   ‚îú‚îÄ‚îÄ deployment/                # Documentaci√≥n de Docker y despliegue
‚îÇ   ‚îú‚îÄ‚îÄ configuracion/             # Documentaci√≥n de configuraci√≥n y ambiente
‚îÇ   ‚îî‚îÄ‚îÄ desarrollo/                # Gu√≠as de desarrollo y patrones
‚îî‚îÄ‚îÄ plan/                          # Documentaci√≥n de planificaci√≥n (existente)
    ‚îú‚îÄ‚îÄ DESIGN_PLAN.md
    ‚îî‚îÄ‚îÄ IMPLEMENTATION_PLAN.md
```

### Archivo √çndice Maestro: `docs/info/index.md`

**PROP√ìSITO CR√çTICO**: 
- **√çndice completo** de toda la documentaci√≥n t√©cnica generada durante desarrollo
- **Navegaci√≥n inteligente** para la IA seg√∫n tipo de consulta sobre TaskManager Pro
- **Descripciones espec√≠ficas** que permiten selecci√≥n precisa de documentos
- **Categorizaci√≥n funcional** para b√∫squeda eficiente por √°rea tecnol√≥gica

**ESTRUCTURA OBLIGATORIA DEL √çNDICE**:
```markdown
# √çndice de Documentaci√≥n T√©cnica - TaskManager Pro

## Resumen
Documentaci√≥n t√©cnica completa del sistema de gesti√≥n de tareas TaskManager Pro desarrollado con React + FastAPI + MariaDB. Incluye arquitectura, implementaci√≥n, configuraci√≥n y gu√≠as de desarrollo.

## Categor√≠as de Documentaci√≥n

### üèóÔ∏è Arquitectura y Estructura
**Descripci√≥n**: Informaci√≥n sobre la arquitectura de 3 capas, componentes principales y flujos de datos del sistema
**Usar cuando**: Se necesite entender la estructura general, relaciones entre componentes, o planificar nuevas funcionalidades
- **arquitectura-general.md**: Visi√≥n completa de la arquitectura de 3 capas - Estado: ‚úÖ/üöß/üìã
- **componentes-core.md**: Documentaci√≥n de componentes principales del sistema - Estado: ‚úÖ/üöß/üìã
- **flujos-datos.md**: Documentaci√≥n de flujos de datos entre frontend y backend - Estado: ‚úÖ/üöß/üìã

### üìä Backend y API
**Descripci√≥n**: Documentaci√≥n espec√≠fica de FastAPI, servicios, endpoints, y l√≥gica de negocio
**Usar cuando**: Se implementen endpoints, servicios, o se trabaje con la l√≥gica del servidor
- **servicios-core.md**: Documentaci√≥nTaskService, UserService, AuthService - Estado: ‚úÖ/üöß/üìã
- **endpoints-api.md**: Documentaci√≥n completa de endpoints REST - Estado: ‚úÖ/üöß/üìã
- **middlewares.md**: Documentaci√≥n de middleware de autenticaci√≥n y validaci√≥n - Estado: ‚úÖ/üöß/üìã

### üé® Frontend y UI
**Descripci√≥n**: Documentaci√≥n espec√≠fica de React, componentes, hooks y estado de la aplicaci√≥n
**Usar cuando**: Se desarrollen componentes React, se maneje estado, o se trabaje con la interfaz de usuario
- **componentes-react.md**: Documentaci√≥n de componentes principales React - Estado: ‚úÖ/üöß/üìã
- **hooks-personalizados.md**: Documentaci√≥n de custom hooks desarrollados - Estado: ‚úÖ/üöß/üìã
- **gestion-estado.md**: Documentaci√≥n de manejo de estado global y local - Estado: ‚úÖ/üöß/üìã

### üíæ Base de Datos y Modelos
**Descripci√≥n**: Documentaci√≥n de modelos SQLAlchemy, esquemas de base de datos y migraciones
**Usar cuando**: Se trabajen modelos de datos, esquemas, relaciones, o migraciones de MariaDB
- **modelos-sqlalchemy.md**: Documentaci√≥n de modelos User, Task, Project, Category - Estado: ‚úÖ/üöß/üìã
- **esquemas-db.md**: Documentaci√≥n del esquema completo de base de datos - Estado: ‚úÖ/üöß/üìã
- **migraciones.md**: Documentaci√≥n de migraciones y cambios de esquema - Estado: ‚úÖ/üöß/üìã

### üîß Configuraci√≥n y Deployment
**Descripci√≥n**: Documentaci√≥n de configuraci√≥n, Docker, variables de entorno y despliegue
**Usar cuando**: Se configure el ambiente, se trabajen contenedores, o se prepare el despliegue
- **docker-setup.md**: Documentaci√≥n de configuraci√≥n Docker Compose - Estado: ‚úÖ/üöß/üìã
- **variables-entorno.md**: Documentaci√≥n de configuraci√≥n y variables de ambiente - Estado: ‚úÖ/üöß/üìã
- **deployment-guia.md**: Gu√≠a completa de despliegue en desarrollo y producci√≥n - Estado: ‚úÖ/üöß/üìã

### üß™ Testing y Validaci√≥n
**Descripci√≥n**: Documentaci√≥n de pruebas unitarias, integraci√≥n y validaci√≥n del sistema
**Usar cuando**: Se implementen tests, se valide funcionalidad, o se configure CI/CD
- **tests-unitarios.md**: Documentaci√≥n de tests con pytest y vitest - Estado: ‚úÖ/üöß/üìã
- **tests-integracion.md**: Documentaci√≥n de pruebas de integraci√≥n completas - Estado: ‚úÖ/üöß/üìã
- **validacion-api.md**: Documentaci√≥n de validaci√≥n de endpoints y contratos - Estado: ‚úÖ/üöß/üìã

### üìã Desarrollo y Patrones
**Descripci√≥n**: Gu√≠as de desarrollo, patrones de c√≥digo y best practices espec√≠ficas del proyecto
**Usar cuando**: Se necesiten ejemplos de patrones, convenciones de c√≥digo, o gu√≠as de desarrollo
- **patrones-react.md**: Patrones espec√≠ficos para componentes React - Estado: ‚úÖ/üöß/üìã
- **patrones-fastapi.md**: Patrones espec√≠ficos para desarrollo con FastAPI - Estado: ‚úÖ/üöß/üìã
- **ai-hints-ejemplos.md**: Ejemplos de AI-Hints para diferentes tipos de c√≥digo - Estado: ‚úÖ/üöß/üìã

## Gu√≠a de Navegaci√≥n para IA

### Por Tipo de Consulta:
- **Implementaci√≥n de componentes React**: Consultar Frontend y UI + Desarrollo y Patrones
- **Desarrollo de endpoints FastAPI**: Consultar Backend y API + Base de Datos y Modelos
- **Configuraci√≥n y setup**: Consultar Configuraci√≥n y Deployment
- **Debugging y errores**: Consultar Testing y Validaci√≥n + categor√≠a espec√≠fica del componente
- **Arquitectura y dise√±o**: Consultar Arquitectura y Estructura
- **Patrones de c√≥digo**: Consultar Desarrollo y Patrones

### Estados de Documentos:
- **‚úÖ Completado**: Documentaci√≥n validada, actualizada y revisada
- **üöß En progreso**: Documentaci√≥n parcial, en desarrollo activo
- **üìã Planificado**: Documentaci√≥n pendiente de crear seg√∫n progreso del proyecto

Last Updated: 2024-12-19
Total Documentos: 0 (estructura base creada)
```

**REGLAS DE ACTUALIZACI√ìN DEL √çNDICE**:
1. **OBLIGATORIO** actualizar cada vez que se cree nueva documentaci√≥n t√©cnica
2. **Descripci√≥n espec√≠fica** debe incluir componentes o funcionalidades documentadas
3. **Estado del documento** debe reflejar completitud real y √∫ltima actualizaci√≥n
4. **Categorizaci√≥n funcional** debe mantenerse consistente con la arquitectura del proyecto
5. **Gu√≠a de navegaci√≥n** debe incluir combinaciones comunes de consultas para TaskManager Pro

## Estructura de Archivos TODO
**Ubicaci√≥n**: `docs/TODO.md` (archivo principal de tareas del proyecto)
**Documentaci√≥n generada**: `docs/info/` (subdirectorio para documentaci√≥n t√©cnica)
**√çndice maestro**: `docs/info/index.md` (CR√çTICO - actualizar siempre)

## Reglas de Implementaci√≥n

### ‚úÖ Buenas Pr√°cticas
- Seguir arquitectura de 3 capas establecida (frontend React, backend FastAPI, database MariaDB)
- Usar patrones de c√≥digo consistentes seg√∫n `.cursor/memory/long_memory/patterns.md`
- Implementar AI-Hints en todo c√≥digo significativo (servicios, componentes principales, endpoints)
- Validar con Docker Compose antes de marcar tareas como completadas
- Mantener consistencia en naming conventions (camelCase TS, snake_case Python)

### ‚ùå Restricciones
- NO modificar estructura de directorios base sin actualizar documentaci√≥n
- NO omitir AI-Hints en componentes principales o servicios cr√≠ticos
- NO marcar tareas como completadas sin validaci√≥n funcional

### üîÑ Flujo de Validaci√≥n
1. **Implementar c√≥digo** siguiendo patrones establecidos
2. **A√±adir AI-Hints** apropiados para el tipo de componente
3. **Ejecutar tests** locales (pytest/vitest seg√∫n corresponda)
4. **Probar con Docker** para validar integraci√≥n completa
5. **Documentar cambios** en `docs/info/` con categorizaci√≥n apropiada
6. **Actualizar √≠ndice** `docs/info/index.md` con nueva documentaci√≥n
7. **Marcar tarea completada** en `docs/TODO.md`

## Casos de Uso Espec√≠ficos

### üíª Implementaci√≥n de C√≥digo
- **Backend FastAPI**: Usar patterns.md para estructura de servicios y endpoints
- **Frontend React**: Seguir patterns de componentes y custom hooks establecidos
- **Base de datos**: Implementar modelos SQLAlchemy con validaciones Pydantic
- **Testing**: Usar pytest para backend, vitest para frontend
- **AI-Hints**: Formato espec√≠fico seg√∫n lenguaje y tipo de componente

### üß™ Pruebas y Validaci√≥n
- **Tests unitarios**: pytest con fixtures para backend, vitest con mocks para frontend
- **Tests integraci√≥n**: Docker Compose para pruebas completas end-to-end
- **Validaci√≥n API**: FastAPI docs autom√°ticas + validaci√≥n manual con curl/Postman
- **Validaci√≥n UI**: Testing manual + React Testing Library para componentes cr√≠ticos

### üìä An√°lisis y M√©tricas
- **Performance**: M√©tricas de carga de API y tiempo de respuesta de UI
- **Cobertura de tests**: Reportes de cobertura con pytest-cov y vitest coverage
- **Calidad de c√≥digo**: An√°lisis con linters (black, prettier, eslint)

### üîß Configuraci√≥n y Setup
- **Docker**: Configuraci√≥n multi-stage para desarrollo y producci√≥n
- **Variables de entorno**: Gesti√≥n con .env y validaci√≥n en aplicaci√≥n
- **Base de datos**: Inicializaci√≥n, migraciones y datos de ejemplo
- **Dependencias**: Gesti√≥n con requirements.txt y package.json con versiones espec√≠ficas

## Plantilla de Respuesta

### Formato de Inicio
```
## Ejecutando Tarea {{TASK}} - {{FILEMD}}

### üìã An√°lisis de Tarea
- **Objetivo**: [Descripci√≥n espec√≠fica del objetivo de la tarea]
- **Prerequisitos**: [Lista de dependencias verificadas con ‚úÖ/‚ùå]
- **Criterios de √©xito**: [M√©tricas t√©cnicas y funcionales espec√≠ficas]

### üîß Planificaci√≥n de Subtareas
1. **{{TASK}}.a**: [Descripci√≥n subtarea espec√≠fica] - [Complejidad: Simple/Moderada/Compleja]
2. **{{TASK}}.b**: [Descripci√≥n subtarea espec√≠fica] - [Complejidad: Simple/Moderada/Compleja]
3. **{{TASK}}.c**: [Descripci√≥n subtarea espec√≠fica] - [Complejidad: Simple/Moderada/Compleja]
[...]

### üöÄ Ejecuci√≥n
[Implementaci√≥n paso a paso de cada subtarea con c√≥digo espec√≠fico]
```

### Formato de Cierre
```
### ‚úÖ Resumen de Completado
- **Subtareas ejecutadas**: [Lista con estado: ‚úÖ Completado / üöß Parcial / ‚ùå Fallido]
- **Archivos modificados**: [Lista espec√≠fica de archivos de c√≥digo creados/modificados]
- **Documentaci√≥n generada**: 
  - **Nuevo documento**: `docs/info/[categoria]/[nombre-documento].md`
  - **√çndice actualizado**: `docs/info/index.md` - [Descripci√≥n espec√≠fica de cambios realizados]
- **Comandos de prueba**: [Comandos espec√≠ficos para validar la implementaci√≥n]

### üìù Pr√≥ximos Pasos
- **Tareas desbloqueadas**: [Referencias espec√≠ficas a tareas TODO que ahora pueden ejecutarse]
- **Mejoras sugeridas**: [Optimizaciones t√©cnicas espec√≠ficas para TaskManager Pro]
- **Documentaci√≥n pendiente**: [Documentaci√≥n adicional requerida seg√∫n funcionalidad implementada]

### üîó Referencias de Documentaci√≥n
- **Consultar**: `docs/info/index.md` para navegaci√≥n completa de documentaci√≥n
- **Documento generado**: Incluido en categor√≠a [nombre-categoria] del √≠ndice maestro
- **Estado**: ‚úÖ Completado / üöß En progreso / üìã Planificado
```

---
*√öltima actualizaci√≥n: 2024-12-19*
*Metodolog√≠a: An√°lisis ‚Üí Planificaci√≥n ‚Üí Ejecuci√≥n ‚Üí Documentaci√≥n*
