# AI-Hint Component: [Docker Compose Prod] [Orquestación para producción] [Proxy reverso, SSL, monitoring]
# AI-Hint Flow: [Production Environment] [Nginx proxy, seguridad, logs, backups] [Alta disponibilidad]

version: '3.8'

services:
  # ========================================
  # Nginx Proxy Reverso y Balanceador
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: taskflow-nginx-prod
    restart: unless-stopped
    volumes:
      - ./docker/nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - static_files:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - taskflow-network
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # Base de datos MongoDB
  # ========================================
  mongodb:
    image: mongo:6-jammy
    container_name: taskflow-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    volumes:
      - mongodb_prod_data:/data/db
      - ./docker/mongo/backup:/backup
      - ./docker/mongo/scripts:/scripts:ro
    command: >
      mongod
      --auth
      --replSet rs0
      --bind_ip_all
      --wiredTigerCacheSizeGB 2
    networks:
      - taskflow-network
    healthcheck:
      test: echo 'rs.status()' | mongosh --authenticationDatabase admin -u ${MONGO_ROOT_USER} -p ${MONGO_ROOT_PASSWORD} --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ========================================
  # Redis para cache y sesiones
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: taskflow-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # Backend API
  # ========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
    image: taskflow/backend:${APP_VERSION:-latest}
    container_name: taskflow-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin&replicaSet=rs0
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      MCP_API_KEY: ${MCP_API_KEY}
      MCP_BASE_URL: ${MCP_BASE_URL}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SESSION_SECRET: ${SESSION_SECRET}
      API_RATE_LIMIT: ${API_RATE_LIMIT:-100}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://yourdomain.com}
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.2"

  # ========================================
  # Frontend React
  # ========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_MCP_ENABLED: ${VITE_MCP_ENABLED:-false}
        VITE_APP_VERSION: ${APP_VERSION:-1.0.0}
    image: taskflow/frontend:${APP_VERSION:-latest}
    container_name: taskflow-frontend-prod
    restart: unless-stopped
    volumes:
      - static_files:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
        reservations:
          memory: 64M
          cpus: "0.1"

  # ========================================
  # Backup Service
  # ========================================
  backup:
    image: alpine:latest
    container_name: taskflow-backup
    restart: "no"
    command: /scripts/backup.sh
    environment:
      MONGO_ROOT_USER: ${MONGO_ROOT_USER}
      MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_DB: ${MONGO_DB}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
      S3_BUCKET: ${S3_BACKUP_BUCKET:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
    volumes:
      - ./docker/backup/scripts:/scripts:ro
      - backup_data:/backup
      - mongodb_prod_data:/data/db:ro
    depends_on:
      - mongodb
    networks:
      - taskflow-network
    profiles:
      - backup

  # ========================================
  # Monitoring (opcional)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: taskflow-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - taskflow-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: taskflow-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - taskflow-network
    profiles:
      - monitoring

# ========================================
# Volúmenes
# ========================================
volumes:
  # Datos persistentes de producción
  mongodb_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  
  # Archivos estáticos y aplicación
  static_files:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  
  # Backups
  backup_data:
    driver: local
  
  # Logs
  nginx_logs:
    driver: local
  
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ========================================
# Redes
# ========================================
networks:
  taskflow-network:
    driver: bridge
    name: taskflow-prod-network
    internal: true
  web:
    driver: bridge
    name: taskflow-web-network 