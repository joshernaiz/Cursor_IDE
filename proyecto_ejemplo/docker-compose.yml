# AI-Hint Component: [Docker Compose Dev] [Orquestación para desarrollo] [Hot reload, debugging, volúmenes]
# AI-Hint Flow: [Development Environment] [MongoDB, Backend API, Frontend] [Networking entre servicios]

version: '3.8'

services:
  # ========================================
  # Base de datos MongoDB
  # ========================================
  mongodb:
    image: mongo:6-jammy
    container_name: taskflow-mongodb-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-taskflow}
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo/init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - taskflow-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # ========================================
  # Redis para cache (opcional)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: taskflow-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ========================================
  # Backend API
  # ========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: taskflow-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DEBUG_PORT: 9229
      MONGODB_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGO_DB:-taskflow}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-refresh-secret-key}
      MCP_API_KEY: ${MCP_API_KEY:-}
      MCP_BASE_URL: ${MCP_BASE_URL:-}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    volumes:
      # Montar código para hot reload
      - ./backend/src:/app/src:ro
      - ./backend/package.json:/app/package.json:ro
      - ./backend/tsconfig.json:/app/tsconfig.json:ro
      # Volumen nombrado para node_modules (evita conflictos con host)
      - backend_node_modules:/app/node_modules
      # Logs
      - ./logs/backend:/app/logs
    ports:
      - "${BACKEND_PORT:-3000}:3000"
      - "${DEBUG_PORT:-9229}:9229"  # Puerto para debugging
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ========================================
  # Frontend React
  # ========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: taskflow-frontend-dev
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:${BACKEND_PORT:-3000}/api
      VITE_MCP_ENABLED: ${VITE_MCP_ENABLED:-true}
      VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0-dev}
    volumes:
      # Montar código para hot reload
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/index.html:/app/index.html:ro
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/vite.config.ts:/app/vite.config.ts:ro
      - ./frontend/tailwind.config.js:/app/tailwind.config.js:ro
      - ./frontend/postcss.config.js:/app/postcss.config.js:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/tsconfig.node.json:/app/tsconfig.node.json:ro
      # Volumen nombrado para node_modules
      - frontend_node_modules:/app/node_modules
    ports:
      - "${FRONTEND_PORT:-3001}:3001"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - taskflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ========================================
  # Nginx para desarrollo (opcional)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: taskflow-nginx-dev
    restart: unless-stopped
    volumes:
      - ./docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${NGINX_PORT:-8080}:80"
    depends_on:
      - backend
      - frontend
    networks:
      - taskflow-network
    profiles:
      - full  # Solo se inicia cuando se especifica el perfil 'full'

# ========================================
# Volúmenes
# ========================================
volumes:
  # Datos persistentes
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  
  # Node modules para evitar conflictos entre host y container
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

# ========================================
# Redes
# ========================================
networks:
  taskflow-network:
    driver: bridge
    name: taskflow-dev-network 